#! /nix/store/iv1k5wr7hbxm51qmdn6l2inq7rd2vfhk-bash-5.2p37/bin/bash
set -e
set -o pipefail
export PATH="/nix/store/2l7h1k77n3dxw34ipwll9x2jrxf1whi2-gnugrep-3.11/bin:/nix/store/27hlrqpjy40ifmmy3rw2fbi5b57l8cmw-coreutils-9.5/bin:/nix/store/zdafq94kb8xq6vw8wa0pnl39nqizb0ly-darwin-system-25.05.ae406c0/sw/bin:/usr/bin:/bin"

systemConfig=/nix/store/zdafq94kb8xq6vw8wa0pnl39nqizb0ly-darwin-system-25.05.ae406c0

_status=0
trap "_status=1" ERR

# Ensure a consistent umask.
umask 0022



# This should be running at the system level, but as user activation runs first
# we run it here with sudo
if [[ $(stat -c '%a' /etc/synthetic.conf) != "644" ]]; then
  echo "fixing permissions on /etc/synthetic.conf..."
  sudo chmod 644 /etc/synthetic.conf
fi

if [[ $(grep -c '^run\b' /etc/synthetic.conf) -gt 1 ]]; then
  echo "found duplicate run entries in /etc/synthetic.conf, removing..."
  sudo sed -i "" -e '/^run\tprivate\/var\/run$/d' /etc/synthetic.conf
fi

if ! grep -q '^run\b' /etc/synthetic.conf 2>/dev/null; then
  echo "setting up /run via /etc/synthetic.conf..."
  printf 'run\tprivate/var/run\n' | sudo tee -a /etc/synthetic.conf >/dev/null
fi

sudo /System/Library/Filesystems/apfs.fs/Contents/Resources/apfs.util -t || true

if [[ ! -L /run ]]; then
  printf >&2 '[1;31merror: apfs.util failed to symlink /run, aborting activation[0m\n'
  printf >&2 'To create a symlink from /run to /var/run, please run:\n'
  printf >&2 '\n'
  printf >&2 "$ printf 'run\tprivate/var/run\n' | sudo tee -a /etc/synthetic.conf\n"
  printf >&2 '$ sudo /System/Library/Filesystems/apfs.fs/Contents/Resources/apfs.util -t\n'
  printf >&2 '\n'
  printf >&2 'The current contents of /etc/synthetic.conf is:\n'
  printf >&2 '\n'
  sed 's/^/    /' /etc/synthetic.conf >&2
  printf >&2 '\n'
  exit 1
fi

IFS=. read -ra osVersion <<<"$(sw_vers -productVersion)"
if (( osVersion[0] < 11 || (osVersion[0] == 11 && osVersion[1] < 3) )); then
  printf >&2 '\e[1;31merror: macOS version is less than 11.3, aborting activation\e[0m\n'
  printf >&2 'Nixpkgs 25.05 requires macOS Big Sur 11.3 or newer, and 25.11 will\n'
  printf >&2 'require macOS Sonoma 14.\n'
  printf >&2 '\n'
  printf >&2 'For more information on your options going forward, see the 25.05\n'
  printf >&2 'release notes:\n'
  printf >&2 '<https://nixos.org/manual/nixos/unstable/release-notes#sec-release-25.05>\n'
  printf >&2 '\n'
  printf >&2 'Nixpkgs 24.11 and nix-darwin 24.11 continue to support down to macOS\n'
  printf >&2 'Sierra 10.12, and will be supported through June 2025.\n'
  printf >&2 '\n'
  printf >&2 'You can override this check by setting:\n'
  printf >&2 '\n'
  printf >&2 '    system.checks.verifyMacOSVersion = false;\n'
  printf >&2 '\n'
  printf >&2 'However, we are unable to provide support if you do so.\n'
  exit 1
fi

if dscl . -list /Users | grep -q '^nixbld'; then
    echo "[1;31merror: Detected old style nixbld users, aborting activation[0m" >&2
    echo "These can cause migration problems when upgrading to certain macOS versions" >&2
    echo "You can enable the following option to migrate to new style nixbld users" >&2
    echo >&2
    echo "    nix.configureBuildUsers = true;" >&2
    echo >&2
    echo "or disable this check with" >&2
    echo >&2
    echo "    system.checks.verifyBuildUsers = false;" >&2
    echo >&2
    exit 2
 fi

buildUser=$(dscl . -read /Groups/nixbld GroupMembership 2>&1 | awk '/^GroupMembership: / {print $2}') || true
if [[ -z "$buildUser" ]]; then
    echo "[1;31merror: Using the nix-daemon requires build users, aborting activation[0m" >&2
    echo "Create the build users or disable the daemon:" >&2
    echo "$ darwin-install" >&2
    echo >&2
    echo "or set (this requires some manual intervention to restore permissions)" >&2
    echo >&2
    echo "    services.nix-daemon.enable = false;" >&2
    echo >&2
    exit 2
fi


firstBuildUserID=$(dscl . -read /Users/_nixbld1 UniqueID | awk '{print $2}')
if [[ $firstBuildUserID != 351 ]]; then
    printf >&2 '\e[1;31merror: Build users have unexpected UIDs, aborting activation\e[0m\n'
    printf >&2 'The default Nix build user ID range has been adjusted for\n'
    printf >&2 'compatibility with macOS Sequoia 15. Your _nixbld1 user currently has\n'
    printf >&2 'UID %d rather than the new default of 351.\n' "$firstBuildUserID"
    printf >&2 '\n'
    printf >&2 'You can automatically migrate the users with the following command:\n'
    printf >&2 '\n'
    if [[ -e /nix/receipt.json ]]; then
        if
            /nix/store/ri8k487849v9b290iz384pi1lgw7n585-jq-1.7.1-bin/bin/jq --exit-status \
            'try(.planner.settings | has("enable_flakes"))' \
            /nix/receipt.json \
            >/dev/null
        then
            installerUrl="https://install.lix.systems/lix"
        else
            installerUrl="https://install.determinate.systems/nix"
        fi
        printf >&2 "    curl --proto '=https' --tlsv1.2 -sSf -L %s | sh -s -- repair sequoia --move-existing-users\n" \
            "$installerUrl"
    else
        printf >&2 "    curl --proto '=https' --tlsv1.2 -sSf -L https://github.com/NixOS/nix/raw/master/scripts/sequoia-nixbld-user-migration.sh | bash -\n"
    fi
    printf >&2 '\n'
    printf >&2 'If you have no intention of upgrading to macOS Sequoia 15, or already\n'
    printf >&2 'have a custom UID range that you know is compatible with Sequoia, you\n'
    printf >&2 'can disable this check by setting:\n'
    printf >&2 '\n'
    printf >&2 '    ids.uids.nixbld = %d;\n' "$((firstBuildUserID - 1))"
    printf >&2 '\n'
    exit 2
fi


if ! dscl . -read /Groups/nixbld PrimaryGroupID &> /dev/null; then
  printf >&2 '[1;31merror: The daemon should not be enabled for single-user installs, aborting activation[0m\n'
  printf >&2 'Disable the nix-daemon service:\n'
  printf >&2 '\n'
  printf >&2 '    services.nix-daemon.enable = false;\n'
  printf >&2 '\n'
  printf >&2 'and remove `nix.useDaemon` from your configuration if it is present.\n'
  printf >&2 '\n'
  exit 2
fi

if test -w /nix/var/nix/db -a ! -O /nix/store; then
    echo >&2 "[1;31merror: the store is not owned by this user, but /nix/var/nix/db is writable[0m"
    echo >&2 "If you are using the daemon:"
    echo >&2
    echo >&2 "    sudo chown -R root:wheel /nix/var/nix/db"
    echo >&2
    echo >&2 "Otherwise:"
    echo >&2
    echo >&2 "    sudo chown -R $USER:staff /nix/store"
    echo >&2
    exit 2
fi

channelsLink=$(readlink "$HOME/.nix-defexpr/channels") || true
case "$channelsLink" in
  *"$USER"*)
    ;;
  "")
    ;;
  *)
    echo "[1;31merror: The ~/.nix-defexpr/channels symlink does not point your users channels, aborting activation[0m" >&2
    echo "Running nix-channel will regenerate it" >&2
    echo >&2
    echo "    rm ~/.nix-defexpr/channels" >&2
    echo "    nix-channel --update" >&2
    echo >&2
    exit 2
    ;;
esac

if grep -q 'etc/profile.d/nix-daemon.sh' /etc/profile; then
    echo "[1;31merror: Found nix-daemon.sh reference in /etc/profile, aborting activation[0m" >&2
    echo "This will override options like nix.nixPath because it runs later," >&2
    echo "remove this snippet from /etc/profile:" >&2
    echo >&2
    echo "    # Nix" >&2
    echo "    if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then" >&2
    echo "      . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'" >&2
    echo "    fi" >&2
    echo "    # End Nix" >&2
    echo >&2
    exit 2
fi

if [[ -d /etc/ssh/authorized_keys.d ]]; then
    printf >&2 '\e[1;31merror: /etc/ssh/authorized_keys.d exists, aborting activation\e[0m\n'
    printf >&2 'SECURITY NOTICE: The previous implementation of the\n'
    printf >&2 '`users.users.<name>.openssh.authorizedKeys.*` options would not delete\n'
    printf >&2 'authorized keys files when the setting for a given user was removed.\n'
    printf >&2 '\n'
    printf >&2 "This means that if you previously stopped managing a user's authorized\n"
    printf >&2 'SSH keys with nix-darwin, or intended to revoke their access by\n'
    printf >&2 'removing the option, the previous set of keys could still be used to\n'
    printf >&2 'log in as that user.\n'
    printf >&2 '\n'
    printf >&2 'You can check the /etc/ssh/authorized_keys.d directory to see which\n'
    printf >&2 'keys were permitted; afterwards, please remove the directory and\n'
    printf >&2 're-run activation. The options continue to be supported and will now\n'
    printf >&2 'correctly permit only the keys in your current system configuration.\n'
    exit 2
fi

if [[ ! -f /opt/homebrew/bin/brew && -z "${INSTALLING_HOMEBREW:-}" ]]; then
    echo "[1;31merror: Using the homebrew module requires homebrew installed, aborting activation[0m" >&2
    echo "Homebrew doesn't seem to be installed. Please install homebrew separately." >&2
    echo "You can install homebrew using the following command:" >&2
    echo >&2
    echo '    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"' >&2
    echo >&2
    exit 2
fi


if [[ "${checkActivation:-0}" -eq 1 ]]; then
  echo "ok" >&2
  exit 0
fi

declare -A etcSha256Hashes=(
  [bashrc]='444c716ac2ccd9e1e3347858cb08a00d2ea38e8c12fdc5798380dc261e32e9ef 617b39e36fa69270ddbee19ddc072497dbe7ead840cbd442d9f7c22924f116f4 6be16cf7c24a3c6f7ae535c913347a3be39508b3426f5ecd413e636e21031e66 08ffbf991a9e25839d38b80a0d3bce3b5a6c84b9be53a4b68949df4e7e487bb7'
  [nix/nix.conf]='7c2d80499b39256b03ee9abd3d6258343718306aca8d472c26ac32c9b0949093 19299897fa312d9d32b3c968c2872dd143085aa727140cec51f57c59083e93b9 c4ecc3d541c163c8fcc954ccae6b8cab28c973dc283fea5995c69aaabcdf785f ef78f401a9b5a42fd15e967c50da384f99ec62f9dbc66ea38f1390b46b63e1ff c06b0c6080dd1d62e61a30cfad100c0cfed2d3bcd378e296632dc3b28b31dc69 ff08c12813680da98c4240328f828647b67a65ba7aa89c022bd8072cba862cf1 f3e03d851c240c1aa7daccd144ee929f0f5971982424c868c434eb6030e961d4 c6080216f2a170611e339c3f46e4e1d61aaf0d8b417ad93ade8d647da1382c11 97f4135d262ca22d65c9554aad795c10a4491fa61b67d9c2430f4d82bbfec9a2 5d23e6d7015756c6f300f8cd558ec4d9234ca61deefd4f2478e91a49760b0747 e4974acb79c56148cb8e92137fa4f2de9b7356e897b332fc4e6769e8c0b83e18 966d22ef5bb9b56d481e8e0d5f7ca2deaf4d24c0f0fc969b2eeaa7ae0aa42907 53712b4335030e2dbfb46bb235f8cffcac83fea404bd32dc99417ac89e2dd7c5 6bb8d6b0dd16b44ee793a9b8382dac76c926e4c16ffb8ddd2bb4884d1ca3f811 24797ac05542ff8b52910efc77870faa5f9e3275097227ea4e50c430a5f72916 b027b5cad320b5b8123d9d0db9f815c3f3921596c26dc3c471457098e4d3cc40'
  [nix/registry.json]=''
  [ssh/ssh_config.d/100-nix-darwin.conf]=''
  [ssh/sshd_config.d/101-authorized-keys.conf]=5a5dc1e20e8abc162ad1cc0259bfd1dbb77981013d87625f97d9bd215175fc0a
  [ssl/certs/ca-certificates.crt]=''
  [zprofile]='db8422f92d8cff684e418f2dcffbb98c10fe544b5e8cd588b2009c7fa89559c5 0235d3c1b6cf21e7043fbc98e239ee4bc648048aafaf6be1a94a576300584ef2'
  [zshenv]=d07015be6875f134976fce84c6c7a77b512079c1c5f9594dfa65c70b7968b65f
  [zshrc]='19a2d673ffd47b8bed71c5218ff6617dfc5e8533b240b9ba79142a45f8823c23 fb5827cb4712b7e7932d438067ec4852c8955a9ff0f55e282473684623ebdfa1 c5a00c072c920f46216454978c44df044b2ec6d03409dc492c7bdcd92c94a110 40b0d8751adae5b0100a4f863be5b75613a49f62706427e92604f7e04d2e2261 2af1b563e389d11b76a651b446e858116d7a20370d9120a7e9f78991f3e5f336'
)

declare -a etcProblems=()

while IFS= read -r -d "" configFile; do
  subPath=${configFile#"$systemConfig"/etc/}
  etcStaticFile=/etc/static/$subPath
  etcFile=/etc/$subPath

  # We need to check files that exist and aren't already links to
  # $etcStaticFile for known hashes.
  if [[
    -e $etcFile
    && $(readlink "$etcFile") != "$etcStaticFile"
  ]]; then
    # Only check hashes of paths that resolve to regular files;
    # everything else (e.g. directories) we complain about
    # unconditionally.
    if [[ -f $(readlink -f "$etcFile") ]]; then
      etcFileSha256Output=$(shasum -a 256 "$etcFile")
      etcFileSha256Hash=${etcFileSha256Output%% *}
      for knownSha256Hash in ${etcSha256Hashes[$subPath]}; do
        if [[ $etcFileSha256Hash == "$knownSha256Hash" ]]; then
          # Hash matches, OK to overwrite; go to the next file.
          continue 2
        fi
      done
    fi
    etcProblems+=("$etcFile")
  fi
done < <(find -H "$systemConfig/etc" -type l -print0)

if (( ${#etcProblems[@]} )); then
  printf >&2 '\x1B[1;31merror: Unexpected files in /etc, aborting '
  printf >&2 'activation\x1B[0m\n'
  printf >&2 'The following files have unrecognized content and would be '
  printf >&2 'overwritten:\n\n'
  printf >&2 '  %s\n' "${etcProblems[@]}"
  printf >&2 '\nPlease check there is nothing critical in these files, '
  printf >&2 'rename them by adding .before-nix-darwin to the end, and '
  printf >&2 'then try again.\n'
  exit 2
fi

nixCustomConfKnownSha256Hashes=(
  # v0.33.0
  6787fade1cf934f82db554e78e1fc788705c2c5257fddf9b59bdd963ca6fec63
  # v0.34.0
  3bd68ef979a42070a44f8d82c205cfd8e8cca425d91253ec2c10a88179bb34aa
)
if [[ -e /etc/nix/nix.custom.conf ]]; then
  nixCustomConfSha256Output=$(shasum -a 256 /etc/nix/nix.custom.conf)
  nixCustomConfSha256Hash=${nixCustomConfSha256Output%% *}
  nixCustomConfIsKnown=
  for nixCustomConfKnownSha256Hash
    in "${nixCustomConfKnownSha256Hashes[@]}"
  do
    if
      [[ $nixCustomConfSha256Hash == "$nixCustomConfKnownSha256Hash" ]]
    then
      nixCustomConfIsKnown=1
      break
    fi
  done
  if [[ ! $nixCustomConfIsKnown ]]; then
    printf >&2 '\e[1;31merror: custom settings in `/etc/nix/nix.custom.conf`, aborting activation\e[0m\n'
    printf >&2 'You will need to migrate these to nix-darwin `nix.*` settings if you\n'
    printf >&2 'wish to keep them. Check the manual for the appropriate settings and\n'
    printf >&2 'add them to your system configuration, then run:\n'
    printf >&2 '\n'
    printf >&2 '  $ sudo mv /etc/nix/nix.custom.conf{,.before-nix-darwin}\n'
    printf >&2 '\n'
    printf >&2 'and activate your system again.\n'
    exit 2
  fi
fi


# Set defaults
echo >&2 "user defaults..."






defaults write com.apple.dock 'autohide' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<true/>
</plist>'
defaults write com.apple.dock 'mru-spaces' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<false/>
</plist>'
defaults write com.apple.dock 'persistent-apps' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>tile-data</key>
		<dict>
			<key>file-data</key>
			<dict>
				<key>_CFURLString</key>
				<string>/Applications/Brave Browser.app</string>
				<key>_CFURLStringType</key>
				<integer>0</integer>
			</dict>
		</dict>
	</dict>
	<dict>
		<key>tile-data</key>
		<dict>
			<key>file-data</key>
			<dict>
				<key>_CFURLString</key>
				<string>/Applications/Ghostty.app</string>
				<key>_CFURLStringType</key>
				<integer>0</integer>
			</dict>
		</dict>
	</dict>
	<dict>
		<key>tile-data</key>
		<dict>
			<key>file-data</key>
			<dict>
				<key>_CFURLString</key>
				<string>/Applications/Obsidian.app</string>
				<key>_CFURLStringType</key>
				<integer>0</integer>
			</dict>
		</dict>
	</dict>
	<dict>
		<key>tile-data</key>
		<dict>
			<key>file-data</key>
			<dict>
				<key>_CFURLString</key>
				<string>/Applications/Telegram.app</string>
				<key>_CFURLStringType</key>
				<integer>0</integer>
			</dict>
		</dict>
	</dict>
	<dict>
		<key>tile-data</key>
		<dict>
			<key>file-data</key>
			<dict>
				<key>_CFURLString</key>
				<string>/Applications/Visual Studio Code.app</string>
				<key>_CFURLStringType</key>
				<integer>0</integer>
			</dict>
		</dict>
	</dict>
	<dict>
		<key>tile-data</key>
		<dict>
			<key>file-data</key>
			<dict>
				<key>_CFURLString</key>
				<string>/Applications/LM Studio.app</string>
				<key>_CFURLStringType</key>
				<integer>0</integer>
			</dict>
		</dict>
	</dict>
	<dict>
		<key>tile-data</key>
		<dict>
			<key>file-data</key>
			<dict>
				<key>_CFURLString</key>
				<string>/System/Applications/iPhone Mirroring.app</string>
				<key>_CFURLStringType</key>
				<integer>0</integer>
			</dict>
		</dict>
	</dict>
</array>
</plist>'
defaults write com.apple.dock 'show-recents' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<false/>
</plist>'
defaults write com.apple.dock 'tilesize' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<integer>24</integer>
</plist>'
defaults write com.apple.dock 'wvous-bl-corner' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<integer>1</integer>
</plist>'
defaults write com.apple.dock 'wvous-br-corner' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<integer>1</integer>
</plist>'
defaults write com.apple.dock 'wvous-tl-corner' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<integer>1</integer>
</plist>'
defaults write com.apple.dock 'wvous-tr-corner' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<integer>1</integer>
</plist>'
defaults write com.apple.finder 'AppleShowAllExtensions' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<true/>
</plist>'
defaults write com.apple.finder 'FXPreferredViewStyle' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<string>Nlsv</string>
</plist>'
defaults write com.apple.finder 'ShowPathbar' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<true/>
</plist>'
defaults write com.apple.finder 'ShowStatusBar' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<true/>
</plist>'
defaults write com.apple.HIToolbox 'AppleFnUsageType' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<integer>1</integer>
</plist>'



defaults write com.apple.screensaver 'askForPasswordDelay' $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<integer>10</integer>
</plist>'









# Only restart Dock if current user is logged in
if pgrep -xu $UID Dock >/dev/null; then
  echo >&2 "restarting Dock..."
  killall Dock || true
fi


# Set up user launchd services in ~/Library/LaunchAgents
echo "setting up user launchd services..."






for f in /run/current-system/user/Library/LaunchAgents/*; do
  [[ -e "$f" ]] || break  # handle when directory is empty
  f=${f#/run/current-system/user/Library/LaunchAgents/}

  if [[ ! -e "/nix/store/2rnp08j766i7k68d5qz318qj1s5ww246-launchd/user/Library/LaunchAgents/$f" ]]; then
    echo "removing user service $(basename "$f" .plist)" >&2
    launchctl unload ~/Library/LaunchAgents/"$f" || true
    if [[ -e ~/Library/LaunchAgents/"$f" ]]; then
      rm -f ~/Library/LaunchAgents/"$f"
    fi
  fi
done

# Homebrew Bundle
echo >&2 "Homebrew bundle..."
if [ -f "/opt/homebrew/bin/brew" ]; then
  PATH="/opt/homebrew/bin":$PATH HOMEBREW_NO_AUTO_UPDATE=1 brew bundle --file='/nix/store/8z6716j4hnyzrywmyvjyd1pz9jrwg10v-Brewfile' --no-lock --no-upgrade
else
  echo -e "\e[1;31merror: Homebrew is not installed, skipping...\e[0m" >&2
fi




exit $_status

